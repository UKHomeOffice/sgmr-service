---
kind: pipeline
type: kubernetes
name: build

platform:
  os: linux
  arch: amd64

steps:
  - name: synch_dev_secrets
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: DEV_DRONE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DEV_DRONE_AWS_SECRET_ACCESS_KEY
      DEPLOY_ENV: dev
      DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
      DRONE_TOKEN:
        from_secret: DRONE_V1_PUBLIC_TOKEN
      DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
    when:
      event:
        - promote
      target:
        - secrets

  - name: synch_staging_secrets
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: STAGING_DRONE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
      DEPLOY_ENV: staging
      DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
      DRONE_TOKEN:
        from_secret: DRONE_V1_PUBLIC_TOKEN
      DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
    when:
      event:
        - promote
      target:
        - secrets

  - name: synch_production_secrets
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/cop-secrets
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
      DEPLOY_ENV: production
      DRONE_SERVER: https://drone-gh.acp.homeoffice.gov.uk
      DRONE_TOKEN:
        from_secret: DRONE_V1_PUBLIC_TOKEN
      DRONE_VERSION: ${DRONE_SYSTEM_VERSION}
    when:
      event:
        - promote
      target:
        - secrets

  - name: unit_test
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/cop-node:12-alpine
    commands:
      - node -v
      - npm -v
      - npm ci
      - npm run test
    when:
      event:
        - push

  - name: linting
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/cop-node:12-alpine
    commands:
      - npm run lint -- .
    when:
      event:
        - push

  - name: build
    pull: if-not-exists
    image: docker:19.03.12-dind
    commands:
      - n=0; while [ "$n" -lt 60 ] && [ ! -e /var/run/docker.sock ]; do n=$(( n + 1 )); sleep 1; done
      - docker build -t sgmr-service:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      branch:
        - master
      event:
        - push

  - name: vulnerability-scan
    image: docker.digital.homeoffice.gov.uk/acp-anchore-submission:latest
    environment:
      DOCKERFILE: Dockerfile
      IMAGE_NAME: sgmr-service:${DRONE_COMMIT_SHA}
      LOCAL_IMAGE: true
      SERVICE_URL: http://anchore-submission-server:10080
      TOLERATE: low
      WHITELIST_FILE: whitelist
    when:
      branch:
        - master
      event:
        - push

  - name: image_to_quay
    image: plugins/docker
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/sgmr-service
      tags:
        - ${DRONE_COMMIT_SHA}
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_PASSWORD
      DOCKER_USERNAME:
        from_secret: QUAY_USERNAME
    when:
      event:
        - push

services:
  - name: docker
    image: docker:19.03.12-dind
    volumes:
      - name: dockersock
        path: /var/run

  - name: anchore-submission-server
    image: docker.digital.homeoffice.gov.uk/acp-anchore-submission:latest
    commands:
      - /anchore-submission server
    environment:
      ANCHORE_URL: acp-anchore.acp.homeoffice.gov.uk
      REGISTRY_URL: acp-ephemeral-registry.acp.homeoffice.gov.uk
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

---
kind: pipeline
type: kubernetes
name: test-and-deploy

depends_on:
  - build

platform:
  os: linux
  arch: amd64

steps:
  - name: e2e_tests
    pull: if-not-exists
    image: cypress/included:6.0.1
    commands:
      - npm ci
      - cypress run --env configFile=ci,mailSlurpApiKey=$${MAILSLURP_API_KEY}
    when:
      event:
        - push
    environment:
      MAILSLURP_API_KEY:
        from_secret: DEV_SGMR_MAILSLURP_API_KEY

  - name: deploy_to_dev
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - export SGMR_SERVICE_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    environment:
      KUBE_NAMESPACE:
        from_secret: DEV_KUBE_NAMESPACE_COP_SGMR
      KUBE_SERVER:
        from_secret: DEV_KUBE_SERVER
      KUBE_TOKEN:
        from_secret: DEV_SGMR_KUBE_TOKEN
      NGINX_IMAGE:
        from_secret: NGINX_IMAGE
      NGINX_TAG:
        from_secret: NGINX_TAG
      SGMR_DATA_API_BASE_URL:
        from_secret: DEV_SGMR_DATA_API_BASE_URL
      SGMR_SERVICE_IMAGE:
        from_secret: SGMR_SERVICE_IMAGE
      SGMR_SERVICE_NAME:
        from_secret: SGMR_SERVICE_NAME
      SGMR_SERVICE_PORT:
        from_secret: SGMR_SERVICE_PORT
      SGMR_SERVICE_URL:
        from_secret: DEV_SGMR_SERVICE_URL
      MAILSLURP_API_KEY:
        from_secret: DEV_SGMR_MAILSLURP_API_KEY
      WHITELIST:
        from_secret: DEV_WHITELIST
    when:
      branch:
        - master
      event:
        - push

  - name: deploy_to_staging
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - export SGMR_SERVICE_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    environment:
      KUBE_NAMESPACE:
        from_secret: STAGING_KUBE_NAMESPACE_COP_SGMR
      KUBE_SERVER:
        from_secret: STAGING_KUBE_SERVER
      KUBE_TOKEN:
        from_secret: STAGING_SGMR_KUBE_TOKEN
      NGINX_IMAGE:
        from_secret: NGINX_IMAGE
      NGINX_TAG:
        from_secret: NGINX_TAG
      SGMR_DATA_API_BASE_URL:
        from_secret: STAGING_SGMR_DATA_API_BASE_URL
      SGMR_SERVICE_IMAGE:
        from_secret: SGMR_SERVICE_IMAGE
      SGMR_SERVICE_NAME:
        from_secret: SGMR_SERVICE_NAME
      SGMR_SERVICE_PORT:
        from_secret: SGMR_SERVICE_PORT
      SGMR_SERVICE_URL:
        from_secret: STAGING_SGMR_SERVICE_URL
      MAILSLURP_API_KEY:
        from_secret: STAGING_SGMR_MAILSLURP_API_KEY
      WHITELIST:
        from_secret: STAGING_WHITELIST
    when:
      event:
        - promote
      target:
        - staging

  - name: deploy_to_production
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - export SGMR_SERVICE_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/cert.yml
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    environment:
      KUBE_NAMESPACE:
        from_secret: PRODUCTION_KUBE_NAMESPACE_COP_SGMR
      KUBE_SERVER:
        from_secret: PRODUCTION_KUBE_SERVER
      KUBE_TOKEN:
        from_secret: PRODUCTION_SGMR_KUBE_TOKEN
      NGINX_IMAGE:
        from_secret: NGINX_IMAGE
      NGINX_TAG:
        from_secret: NGINX_TAG
      SGMR_DATA_API_BASE_URL:
        from_secret: PRODUCTION_SGMR_DATA_API_BASE_URL
      SGMR_SERVICE_IMAGE:
        from_secret: SGMR_SERVICE_IMAGE
      SGMR_SERVICE_NAME:
        from_secret: SGMR_SERVICE_NAME
      SGMR_SERVICE_PORT:
        from_secret: SGMR_SERVICE_PORT
      SGMR_SERVICE_URL:
        from_secret: PRODUCTION_SGMR_SERVICE_URL
      MAILSLURP_API_KEY:
        from_secret: PRODUCTION_SGMR_MAILSLURP_API_KEY
      WHITELIST:
        from_secret: PRODUCTION_WHITELIST
    when:
      event:
        - promote
      target:
        - production

  - name: notify
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: cop-deployments
      template: "{{#build.deployTo}}\n  *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*\n  {{build.link}}\n{{else}}\n  *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*\n  {{build.link}}\n{{/build.deployTo}}\n"
      username: Drone Build Watcher
    environment:
      SLACK_WEBHOOK:
        from_secret: SLACK_WEBHOOK
    when:
      branch:
        - master
      event:
        - push
        - promote
      status:
        - success
        - failure

services:
  - name: docker
    image: docker:19.03.12-dind
    volumes:
      - name: dockersock
        path: /var/run

  - name: sgmr-db
    image: postgres:12
    environment:
      LC_ALL: C.UTF-8
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      POSTGRES_DB: sgmr_test_db

  - name: sgmr-api
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/cop/sgmr-data-api
    environment:
      GOV_NOTIFY_API_KEY:
        from_secret: CI_SGMR_DATA_API_GOV_NOTIFY_API_KEY
      GOV_NOTIFY_PASSWORD_RESET_TEMPLATE_ID:
        from_secret: CI_SGMR_DATA_API_GOV_NOTIFY_PASSWORD_RESET_TEMPLATE_ID
      GOV_NOTIFY_REGISTRATION_TEMPLATE_ID:
        from_secret: CI_SGMR_DATA_API_GOV_NOTIFY_REGISTRATION_TEMPLATE_ID
      GOV_NOTIFY_VOYAGE_CANCELLATION_TEMPLATE_ID:
        from_secret: CI_SGMR_DATA_API_GOV_NOTIFY_VOYAGE_CANCELLATION_TEMPLATE_ID
      GOV_NOTIFY_VOYAGE_SUBMISSION_TEMPLATE_ID:
        from_secret: CI_SGMR_DATA_API_GOV_NOTIFY_VOYAGE_SUBMISSION_TEMPLATE_ID
      JWT_EXPIRY_HOURS: 3
      JWT_SECRET_KEY:
        from_secret: CI_SGMR_DATA_API_JWT_SECRET_KEY
      KUBE_NAMESPACE:
        from_secret: CI_KUBE_NAMESPACE_COP_SGMR
      KUBE_SERVER:
        from_secret: CI_KUBE_SERVER
      KUBE_TOKEN:
        from_secret: CI_SGMR_KUBE_TOKEN
      NGINX_IMAGE:
        from_secret: NGINX_IMAGE
      NGINX_TAG:
        from_secret: NGINX_TAG
      ONE_TIME_PASS_INTERVAL_LENGTH:
        from_secret: CI_SGMR_DATA_API_ONE_TIME_PASS_INTERVAL_LENGTH
      ONE_TIME_PASS_SECRET:
        from_secret: CI_SGMR_DATA_API_ONE_TIME_PASS_SECRET
      REF_DATA_API_HAWK_ID:
        from_secret: CI_REF_DATA_API_HAWK_ID
      REF_DATA_API_HAWK_KEY:
        from_secret: CI_REF_DATA_API_HAWK_KEY
      REF_DATA_API_URL:
        from_secret: CI_API_REF_URL
      S3_AWS_ACCESS_KEY_ID:
        from_secret: CI_SGMR_DATA_API_S3_AWS_ACCESS_KEY_ID
      S3_AWS_SECRET_ACCESS_KEY:
        from_secret: CI_SGMR_DATA_API_S3_AWS_SECRET_ACCESS_KEY
      S3_BUCKET_NAME:
        from_secret: CI_SGMR_DATA_API_S3_BUCKET_NAME
      SERVICE_USER_EMAIL:
        from_secret: CI_SGMR_DATA_API_SERVICE_USER_EMAIL
      SERVICE_USER_PASSWORD:
        from_secret: CI_SGMR_DATA_API_SERVICE_USER_PASSWORD
      SGMR_DATA_API_IMAGE:
        from_secret: SGMR_DATA_API_IMAGE
      SGMR_DATA_API_NAME:
        from_secret: SGMR_DATA_API_NAME
      SGMR_DATA_API_PORT:
        from_secret: SGMR_DATA_API_PORT
      SGMR_DATA_API_URL:
        from_secret: CI_SGMR_DATA_API_URL
      SQS_QUEUE_AWS_ACCESS_KEY_ID:
        from_secret: CI_SGMR_DATA_API_SQS_QUEUE_AWS_ACCESS_KEY_ID
      SQS_QUEUE_AWS_SECRET_ACCESS_KEY:
        from_secret: CI_SGMR_DATA_API_SQS_QUEUE_AWS_SECRET_ACCESS_KEY
      SQS_QUEUE_NAME:
        from_secret: CI_SGMR_DATA_API_SQS_QUEUE_NAME
      SQS_QUEUE_SSE_KMS_KEY_ID:
        from_secret: CI_SGMR_DATA_API_SQS_QUEUE_SSE_KMS_KEY_ID
      SQS_URL:
        from_secret: CI_SGMR_DATA_API_SQS_URL
      WHITELIST:
        from_secret: CI_WHITELIST
      DBUSER: postgres
      DBPASSWORD: test
      DBHOST: sgmr-db
      DBNAME: sgmr_test_db
      FLASK_APP: run.py
      FLASK_ENV: dev
      DEBUG: True
    volumes:
      - name: dockersock
        path: /var/run

  - name: sgmr-frontend
    image: quay.io/ukhomeofficedigital/sgmr-service:${DRONE_COMMIT_SHA}
    environment:
      SGMR_DATA_API_BASE_URL: http://sgmr-api:8080
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
...
